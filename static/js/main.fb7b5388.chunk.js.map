{"version":3,"sources":["assets/img/kanye2.png","assets/img/chuck.gif","components/Items.js","components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Items","props","key","index","className","src","require","alt","arraykanyePhrases","arrayColor","icon_url","item","icon","faThumbsUp","faThumbsDown","ListItems","arraychuckPhrases","map","App","useState","value","chuckPhrase","setchuckPhrase","kanyePhrase","setkanyePhrase","setarraychuckPhrases","setarraykanyePhrases","setarrayColor","newFetch","fetch","then","response","json","data","quote","addItem","backColor","oldArray","prev","useEffect","console","log","onClick","faCoffee","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb7b5388.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kanye2.bb90b8a7.png\";","module.exports = __webpack_public_path__ + \"static/media/chuck.80768de0.gif\";","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThumbsUp, faThumbsDown } from '@fortawesome/free-solid-svg-icons'\r\nimport './css/items.style.min.css'\r\nexport default function Items(props) {\r\n\treturn (\r\n\t\t<li key={props.index} className={'vote-li'}>\r\n\t\t\t<div className={'vote-kanye'}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={require('../assets/img/kanye2.png')}\r\n\t\t\t\t\talt='kanye'\r\n\t\t\t\t\tclassName={'vote-image-kanye'}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div className={'vote-kanye-text'}>\r\n\t\t\t\t\t{props.arraykanyePhrases[props.index]}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div\r\n\t\t\t\tclassName={\r\n\t\t\t\t\tprops.arrayColor[props.index] ? 'vote-green' : 'vote-red'\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<img\r\n\t\t\t\t\tclassName={'vote-image'}\r\n\t\t\t\t\tsrc={props.icon_url}\r\n\t\t\t\t\talt='chuck'\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<div className={'vote-text'}>{props.item}</div>\r\n\t\t\t\t<div className={'vote-thumbs'}>\r\n\t\t\t\t\t{props.arrayColor[props.index] && (\r\n\t\t\t\t\t\t<div className={'vote-Like'}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faThumbsUp} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{!props.arrayColor[props.index] && (\r\n\t\t\t\t\t\t<div className={'vote-Dislike'}>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faThumbsDown} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport Items from './Items'\r\nimport './css/listitems.style.min.css'\r\n\r\nexport default function ListItems(props) {\r\n\treturn (\r\n\t\t<ul className='vote-ul'>\r\n\t\t\t{props.arraychuckPhrases.map((item, index) => (\r\n\t\t\t\t<Items\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tindex={index}\r\n\t\t\t\t\titem={item}\r\n\t\t\t\t\tarraykanyePhrases={props.arraykanyePhrases}\r\n\t\t\t\t\tarrayColor={props.arrayColor}\r\n\t\t\t\t\ticon_url={props.icon_url}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t)\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport './css/app.style.min.css'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n\tfaCoffee,\n\tfaThumbsUp,\n\tfaThumbsDown,\n} from '@fortawesome/free-solid-svg-icons'\nimport ListItems from './components/ListItems'\n\nfunction App() {\n\tconst [chuckPhrase, setchuckPhrase] = useState({\n\t\tvalue: '',\n\t\ticon_url: '',\n\t})\n\tconst [kanyePhrase, setkanyePhrase] = useState({\n\t\tvalue: '',\n\t\ticon_url: '',\n\t})\n\n\tconst [arraychuckPhrases, setarraychuckPhrases] = useState([])\n\tconst [arraykanyePhrases, setarraykanyePhrases] = useState([])\n\t//set background color depending on className\n\t// const [backColor, setbackColor] = useState(null)\n\tconst [arrayColor, setarrayColor] = useState([])\n\n\tuseEffect(() => {\n\t\tnewFetch()\n\t\tconsole.log('fetching')\n\t}, [])\n\n\tfunction newFetch() {\n\t\tfetch('https://api.chucknorris.io/jokes/random')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetchuckPhrase({\n\t\t\t\t\tvalue: data.value,\n\t\t\t\t\ticon_url: data.icon_url,\n\t\t\t\t})\n\t\t\t})\n\n\t\tfetch('https://api.kanye.rest')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetkanyePhrase({\n\t\t\t\t\tvalue: data.quote,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\tfunction addItem(backColor) {\n\t\tnewFetch()\n\t\tsetarraychuckPhrases((oldArray) => [chuckPhrase.value, ...oldArray])\n\t\tsetarraykanyePhrases((oldArray) => [kanyePhrase.value, ...oldArray])\n\t\tsetarrayColor((prev) => [backColor, ...prev])\n\t}\n\n\treturn (\n\t\t<div className='front'>\n\t\t\t<p className='front-title'>When Kanye comments Chuck</p>\n\t\t\t<div className={'front-image'}>\n\t\t\t\t<img src={require('./assets/img/chuck.gif')} alt='chuck' />\n\t\t\t</div>\n\t\t\t<div className={'front-text'}>\n\t\t\t\t<p className={'front-text-inside'}>{chuckPhrase.value}</p>\n\t\t\t</div>\n\t\t\t<div className={'front-button'}>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => addItem(true)}\n\t\t\t\t\tclassName={'front-button1'}\n\t\t\t\t>\n\t\t\t\t\t<span className='like-btnLike'>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<FontAwesomeIcon icon={faThumbsUp} />\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\t\t\t\t<span className={'front-icon'}>\n\t\t\t\t\t<FontAwesomeIcon icon={faCoffee} />\n\t\t\t\t</span>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => addItem(false)}\n\t\t\t\t\tclassName={'front-button2'}\n\t\t\t\t>\n\t\t\t\t\t<span className='like-btnDislike'>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<FontAwesomeIcon icon={faThumbsDown} />\n\t\t\t\t\t</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div className='vote'>\n\t\t\t\t<ListItems\n\t\t\t\t\tarraychuckPhrases={arraychuckPhrases}\n\t\t\t\t\tarraykanyePhrases={arraykanyePhrases}\n\t\t\t\t\tarrayColor={arrayColor}\n\t\t\t\t\ticon_url={chuckPhrase.icon_url}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}